/*
 * Copyright 2018 Kislitsyn Ilya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        kotlinVersion = '1.2.30'
        springBootVersion = '1.5.10.RELEASE'

        junit5Version = '5.0.1'
        junit5PluginVersion = '1.0.1'
        junit5PlatformVersion = '1.0.1'

        liquidbaseVersion = '3.5.5'
        hikaricpVersion = '2.7.8'
        hibernateVersion = '5.2.16.Final'

        jasyptVersion = '1.9.2'
        bcVersion = '1.59'

        commonsCodecVersion = '1.10'
        commonsLangVersion = '3.7'
        snakeyamlVersion = '1.20'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")

        // junit plugin
        classpath("org.junit.platform:junit-platform-gradle-plugin:$junit5PluginVersion")
    }
}


group = 'org.github.snt'
version = '0.0.1-SNAPSHOT'


subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-kapt'

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    apply plugin: 'org.junit.platform.gradle.plugin'

    bootRepackage {
        enabled = false
    }

    sourceCompatibility = 1.8
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"

    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }


    repositories {
        mavenCentral()
    }

    dependencies {
        // kotlin support
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
        compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

        // annotation processors
        kapt('org.springframework.boot:spring-boot-configuration-processor')
        compile('org.springframework.boot:spring-boot-configuration-processor')

        // spring dependencies
        compile('org.springframework:spring-core')
        compile('org.springframework.boot:spring-boot-starter')
        runtime('org.springframework.boot:spring-boot-devtools')
        testCompile('org.springframework.boot:spring-boot-starter-test')

        // common dependencies
        compile("commons-codec:commons-codec:$commonsCodecVersion")
        compile("org.apache.commons:commons-lang3:$commonsLangVersion")
        compile("org.yaml:snakeyaml:$snakeyamlVersion")


        compile("org.jasypt:jasypt:$jasyptVersion")
        compile("org.bouncycastle:bcprov-jdk15on:$bcVersion")

        // junit dependencies
        testCompile("org.junit.jupiter:junit-jupiter-api:$junit5Version")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit5Version")
        testRuntime("org.junit.platform:junit-platform-launcher:$junit5PlatformVersion")
        testRuntime("org.junit.platform:junit-platform-runner:$junit5PlatformVersion")

        // no need for junit4
        //testRuntime('org.junit.vintage:junit-vintage-engine:4.12.1')
    }

    // copy generated by kapt spring config metadata into resources
    compileKotlin.doLast {
        copy {
            from('build/tmp/kapt3/classes/main/META-INF')
            into('src/main/resources/META-INF')
        }
    }
}


